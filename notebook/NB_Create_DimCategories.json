{
	"name": "NB_Create_DimCategories",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "077f5ba7-8aea-4e03-94e3-0013a8a4f91d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
					"import com.microsoft.spark.sqlanalytics\n",
					"from pyspark.sql.window import Window\n",
					"\n",
					"\n",
					"df = spark.read.format(\"com.crealytics.spark.excel\") \\\n",
					"    .option(\"header\", \"true\") \\\n",
					"    .option(\"inferSchema\", \"true\") \\\n",
					"    .option(\"dataAddress\", \"'All'!A1\") \\\n",
					"    .load(\"abfss://library@group2projectstorage.dfs.core.windows.net/raw/library2023.xls\") \\\n",
					"\n",
					"column_names = df.columns\n",
					"del df\n",
					"column_names = [name for name in column_names if name.startswith(\"Kokoelmat: \") or name.startswith(\"Lainaus: \")]\n",
					"column_names = [name.replace(\"Lainaus: \", \"\").replace(\"Kokoelmat: \", \"\").replace(\"_\", \" \") for name in column_names]\n",
					"column_names = [name.capitalize() for name in column_names]\n",
					"unique_columns = []\n",
					"[unique_columns.append(name) for name in column_names if name not in unique_columns and name != \"Kirjat yhteens√§\" and name != \"Dvd ja blue-ray -levyt (-2017)\"]\n",
					"del column_names\n",
					"\n",
					"df_dim_category = spark.createDataFrame([(item,) for item in unique_columns], [\"kategoria_nimi\"])\n",
					"print(unique_columns)\n",
					"del unique_columns\n",
					"\n",
					"df_dim_category = df_dim_category.withColumn(\"kategoria_alkaen\", \n",
					"                F.when(F.col(\"kategoria_nimi\").contains(\"-)\"), \n",
					"                F.regexp_extract(F.col(\"kategoria_nimi\"), r\"\\((\\d+)-\\)\", 1)\n",
					"                ).otherwise(None))\n",
					"\n",
					"df_dim_category = df_dim_category.withColumn(\"kategoria_paattyen\", \n",
					"                F.when(F.col(\"kategoria_nimi\").contains(\"(-\"), \n",
					"                F.regexp_extract(F.col(\"kategoria_nimi\"), r\"\\(-(\\d+)\\)\", 1)\n",
					"                ).otherwise(None))\n",
					"\n",
					"df_dim_category = df_dim_category.withColumn(\"kategoria_nimi\",\n",
					"                F.when(F.col(\"kategoria_nimi\").contains(\" (\"),\n",
					"                F.split(F.col(\"kategoria_nimi\"), \" \\(\", -1)[0]).otherwise(F.col(\"kategoria_nimi\"))\n",
					"                )\n",
					"df_dim_category = df_dim_category.withColumn(\n",
					"    \"kategoria_id\", \n",
					"    F.row_number().over(Window.orderBy(F.monotonically_increasing_id()))\n",
					")\n",
					"\n",
					"df_dim_category = df_dim_category.select([\"kategoria_id\", \"kategoria_nimi\", \"kategoria_alkaen\", \"kategoria_paattyen\"])\n",
					"\n",
					"df_dim_category.write.mode(\"overwrite\").synapsesql(\"group2sqlpool.library.dim_categories\")"
				],
				"execution_count": 38
			}
		]
	}
}