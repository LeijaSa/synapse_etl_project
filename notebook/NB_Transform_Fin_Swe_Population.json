{
	"name": "NB_Transform_Fin_Swe_Population",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bb4dd839-54dd-42e3-87ff-8fd7d88987d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# Path to the CSV file\n",
					"df = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/languages_data.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"\n",
					"# Show the schema and preview the data\n",
					"#df.printSchema()\n",
					"#df.show(truncate=False)\n",
					"\n",
					"display(df)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/languages_data.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"for column in df.columns:\n",
					"    if column.lower() not in [\"alue\", \"vuosi\",\"yhteensä suomenkielinen väestö\",\"yhteensä ruotsinkielinen väestö\"]:\n",
					"        df = df.drop(column)\n",
					"    elif column.lower() ==\"vuosi\":\n",
					"        df = df.withColumnRenamed(column, \"vuosi\")\n",
					"    elif column.lower() ==\"alue\":\n",
					"        df = df.withColumnRenamed(column, \"kunta\")\n",
					"    elif column.lower() ==\"yhteensä suomenkielinen väestö\":\n",
					"        df = df.withColumnRenamed(column, \"suomenkielinen_vaesto\")\n",
					"    elif column.lower() ==\"yhteensä ruotsinkielinen väestö\":\n",
					"        df = df.withColumnRenamed(column, \"ruotsinkielinen_vaesto\")\n",
					"\n",
					"display(df)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df.printSchema()\n",
					"df = df.filter(df.kunta != \"KOKO MAA\")\n",
					"#display(df)\n",
					"\n",
					"# Get distinct values from the 'vuosi' column\n",
					"distinct_vuosi = df.select('vuosi').distinct().collect()\n",
					"\n",
					"# Convert the result into a list of values\n",
					"distinct_vuosi_values = [row['vuosi'] for row in distinct_vuosi]\n",
					"\n",
					"# Display the distinct values\n",
					"print(distinct_vuosi_values)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"\n",
					"df = df.withColumn(\"kunta\", F.regexp_replace(F.col(\"kunta\"), \"Koski Tl\", \"Koski\"))\n",
					"df.filter(F.col(\"kunta\") == \"Koski\").show()\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"source": [
					"# Define output path\n",
					"output_path = \"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/finswe/finswe_data.parquet\"\n",
					"\n",
					"# Save DataFrame as Parquet\n",
					"df.write.mode(\"overwrite\").parquet(output_path)\n",
					"\n",
					"print(\"Data successfully saved to ADLS in Parquet format.\")"
				],
				"execution_count": 21
			}
		]
	}
}