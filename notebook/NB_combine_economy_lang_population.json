{
	"name": "NB_combine_economy_lang_population",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f55ac951-56be-4296-9200-2e2025465665"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"\n",
					"df_economy = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/economy/\", header=True, inferSchema=True)\n",
					"df_lang = spark.read.parquet(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/finswe/finswe_data.parquet/\")\n",
					"#df_population = spark.read.parquet(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/population/population_data.parquet\")\n",
					"\n",
					"display(df_economy)\n",
					"display(df_lang)\n",
					"\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# List of new column names\n",
					"columns = [\n",
					"    \"kunta\", \n",
					"    \"vuosi\", \n",
					"    \"toimintakulut_tilastovuonna\", \n",
					"    \"henkilostokulut\", \n",
					"    \"kirjastoaineistokulut\", \n",
					"    \"kirjojen_hankintakulut\", \n",
					"    \"e_aineistokulut\", \n",
					"    \"tilakustannukset\", \n",
					"    \"muut_kulut\", \n",
					"    \"toimintakulut_kuluvan_vuoden_talousarviossa\", \n",
					"]\n",
					"\n",
					"# Loop through each column and count the number of null values\n",
					"null_counts = {}\n",
					"for column in columns:\n",
					"    null_count = df_economy.filter(F.col(column).isNull()).count()\n",
					"    null_counts[column] = null_count\n",
					"\n",
					"# Display the results\n",
					"for column, count in null_counts.items():\n",
					"    print(f\"Number of null values in '{column}': {count}\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# List of new column names\n",
					"columns = [\n",
					"    \"kunta\", \n",
					"    \"vuosi\", \n",
					"    \"suomenkielinen_vaesto\", \n",
					"    \"ruotsinkielinen_vaesto\", \n",
					"]\n",
					"\n",
					"# Loop through each column and count the number of null values\n",
					"null_counts = {}\n",
					"for column in columns:\n",
					"    null_count = df_lang.filter(F.col(column).isNull()).count()\n",
					"    null_counts[column] = null_count\n",
					"\n",
					"# Display the results\n",
					"for column, count in null_counts.items():\n",
					"    print(f\"Number of null values in '{column}': {count}\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df_combined = df_economy.join(df_lang, on=[\"kunta\", \"vuosi\"], how=\"outer\")\n",
					"display(df_combined)\n",
					"for column in df_combined.columns:\n",
					"    print(column)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# List of new column names\n",
					"columns = [\n",
					"    \"kunta\", \n",
					"    \"vuosi\", \n",
					"    \"toimintakulut_tilastovuonna\", \n",
					"    \"henkilostokulut\", \n",
					"    \"kirjastoaineistokulut\", \n",
					"    \"kirjojen_hankintakulut\", \n",
					"    \"e_aineistokulut\", \n",
					"    \"tilakustannukset\", \n",
					"    \"muut_kulut\", \n",
					"    \"toimintakulut_kuluvan_vuoden_talousarviossa\", \n",
					"    \"suomenkielinen_vaesto\", \n",
					"    \"ruotsinkielinen_vaesto\"\n",
					"]\n",
					"\n",
					"# Loop through each column and count the number of null values\n",
					"null_counts = {}\n",
					"for column in columns:\n",
					"    null_count = df_combined.filter(F.col(column).isNull()).count()\n",
					"    null_counts[column] = null_count\n",
					"\n",
					"# Display the results\n",
					"for column, count in null_counts.items():\n",
					"    print(f\"Number of null values in '{column}': {count}\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# Filter rows where 'suomenkielinen_vaesto' is null\n",
					"null_rows = df_combined.filter(F.col(\"suomenkielinen_vaesto\").isNull())\n",
					"\n",
					"# Display the result\n",
					"display(null_rows)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# Filter rows where 'suomenkielinen_vaesto' is null\n",
					"null_rows = df_combined.filter(F.col(\"toimintakulut_tilastovuonna\").isNull())\n",
					"\n",
					"# Display the result\n",
					"display(null_rows)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}