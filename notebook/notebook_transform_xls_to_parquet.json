{
	"name": "notebook_transform_xls_to_parquet",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c94e4d05-fa4b-48c8-922c-49ad7259d5d7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# Initialize Spark Session\n",
					"spark = SparkSession.builder.appName(\"ReadExcel\") \\\n",
					"    .config(\"spark.jars.packages\", \"com.crealytics:spark-excel_2.12:0.13.3\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"# List of file paths\n",
					"file_paths = [\n",
					"    f\"abfss://library@group2projectstorage.dfs.core.windows.net/raw/library{year}.xls\"\n",
					"    for year in range(2014, 2023)\n",
					"]\n",
					"\n",
					"# Read and merge all files\n",
					"df_list = [\n",
					"    spark.read.format(\"com.crealytics.spark.excel\")\n",
					"    .option(\"header\", \"true\")\n",
					"    .option(\"inferSchema\", \"true\")\n",
					"    .option(\"dataAddress\", \"'All'!A1\")\n",
					"    .load(file)\n",
					"    for file in file_paths\n",
					"]\n",
					"\n",
					"# Union all DataFrames into one\n",
					"df_combined = df_list[0]  # Start with the first DataFrame\n",
					"for df in df_list[1:]:\n",
					"    df_combined = df_combined.unionByName(df, allowMissingColumns=True)  # Combine, allowing missing columns\n",
					"\n",
					"# Display the final combined DataFrame\n",
					"display(df_combined)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import split\n",
					"\n",
					"# Split the 'kokoelmat0' column into two parts based on the comma\n",
					"df = df.withColumn(\"kunta\", split(df[\"kokoelmat0\"], \",\").getItem(0)) \\\n",
					"       .withColumn(\"vuosi\", split(df[\"kokoelmat0\"], \",\").getItem(1))\n",
					"\n",
					"# Drop the original 'kokoelmat0' column\n",
					"df = df.drop(\"kokoelmat0\")\n",
					"\n",
					"# Reorder columns to have 'kunta' and 'kunta' as the first columns\n",
					"new_order = [\"kunta\", \"vuosi\"] + [col for col in df.columns if col not in [\"kunta\", \"vuosi\"]]\n",
					"df = df.select(new_order)\n",
					"\n",
					"# Show the updated DataFrame\n",
					"display(df)\n",
					"\n",
					"# Print the updated column names to verify the order\n",
					"print(\"Updated Columns in DataFrame:\")\n",
					"for col in df.columns:\n",
					"    print(col)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"# Function to rename columns: remove numbers, parentheses, hyphens, and make lowercase\n",
					"new_columns = [re.sub(r'[^\\w\\s]|\\d+', '', col) # Remove numbers and special characters like (), -, etc.\n",
					"                .strip()\n",
					"                .replace(\" \", \"_\") # Replace spaces with underscores\n",
					"                .lower() # Convert to lowercase\n",
					"            for col in df.columns]\n",
					"\n",
					"# Apply new column names\n",
					"for old_name, new_name in zip(df.columns, new_columns):\n",
					"    df = df.withColumnRenamed(old_name, new_name)\n",
					"\n",
					"# Show the DataFrame with the updated column names\n",
					"display(df)\n",
					"\n",
					"# Print the updated column names in separate lines\n",
					"print(\"Updated Columns in DataFrame:\")\n",
					"for col in df.columns:\n",
					"    print(col)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Drop the columns 'talous' and 'lainaus'\n",
					"df = df.drop(\"talous\", \"lainaus\", \"lähetetyt_kaukolainat\")\n",
					"\n",
					"# Print the updated column names to verify\n",
					"print(\"Updated Columns in DataFrame:\")\n",
					"for col in df.columns:\n",
					"    print(col)\n",
					"\n",
					"# Show the updated schema to verify the changes\n",
					"df.printSchema()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import IntegerType\n",
					"\n",
					"# Get all column names except \"kunta\"\n",
					"columns_to_convert = [field.name for field in df.schema.fields if field.name != \"kunta\"]\n",
					"\n",
					"# Convert all selected columns to integer\n",
					"for column in columns_to_convert:\n",
					"    df = df.withColumn(column, col(column).cast(IntegerType()))\n",
					"\n",
					"# Show the updated schema\n",
					"df.printSchema()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import DecimalType\n",
					"\n",
					"# List of columns that should be converted to decimal\n",
					"decimal_columns = [\n",
					"    \"toimintakulut_tilastovuonna\",\n",
					"    \"henkilöstökulut\",\n",
					"    \"kirjastoaineistokulut\",\n",
					"    \"kirjojen_hankintakulut\",\n",
					"    \"eaineistokulut\",\n",
					"    \"tilakustannukset\",\n",
					"    \"muut_kulut\",\n",
					"    \"toimintakulut_kuluvan_vuoden_talousarviossa\"\n",
					"]\n",
					"\n",
					"# Define precision and scale (adjust as needed)\n",
					"decimal_precision = 12  # Max number of digits\n",
					"decimal_scale = 2       # Number of decimal places\n",
					"\n",
					"# Cast these columns to DecimalType\n",
					"for column in decimal_columns:\n",
					"    df = df.withColumn(column, col(column).cast(DecimalType(decimal_precision, decimal_scale)))\n",
					"\n",
					"# Show the updated schema to verify the changes\n",
					"df.printSchema()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"\n",
					"# Define output path\n",
					"output_path = \"abfss://library@group2projectstorage.dfs.core.windows.net/silver/notebook_files/library_data.parquet\"\n",
					"\n",
					"# Save DataFrame as Parquet\n",
					"df_combined.write.mode(\"overwrite\").parquet(output_path)\n",
					"\n",
					"print(\"Data successfully saved to ADLS in Parquet format.\")"
				],
				"execution_count": 16
			}
		]
	}
}