{
	"name": "NB_Create_Fact_Library",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ad4c976b-7743-487c-8c33-2455f3284369"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
					"import com.microsoft.spark.sqlanalytics\n",
					"\n",
					"#Read library parquet\n",
					"df = spark.read.parquet(\"abfss://library@group2projectstorage.dfs.core.windows.net/silver/librarydata/\")\n",
					"\n",
					"#Create simple mapping for category ids\n",
					"mapping = {\n",
					"    1: [\"kokoelmat_suomenkieliset_kirjat\", \"lainaus_suomenkieliset_kirjat\"],\n",
					"    2: [\"kokoelmat_ruotsinkieliset_kirjat\", \"lainaus_ruotsinkieliset_kirjat\"],\n",
					"    3: [\"kokoelmat_muunkieliset_kirjat\", \"lainaus_muunkieliset_kirjat\"],\n",
					"    4: [\"kokoelmat_kaunokirjat_aikuiset\", \"lainaus_kaunokirjat_aikuiset\"],\n",
					"    5: [\"kokoelmat_kaunokirjat_lapset\", \"lainaus_kaunokirjat_lapset\"],\n",
					"    6: [\"kokoelmat_tietokirjat_aikuiset\", \"lainaus_tietokirjat_aikuiset\"],\n",
					"    7: [\"kokoelmat_tietokirjat_lapset\", \"lainaus_tietokirjat_lapset\"],\n",
					"    8: [\"kokoelmat_nuotit_ja_partituurit\", \"lainaus_nuotit_ja_partituurit\"],\n",
					"    9: [\"kokoelmat_musiikkiaanitteet\", \"lainaus_musiikkiaanitteet\"],\n",
					"    10: [\"kokoelmat_muut_aanitteet\", \"lainaus_muut_aanitteet\"],\n",
					"    11: [\"kokoelmat_videotallenteet\", \"lainaus_videotallenteet\"],\n",
					"    12: [\"kokoelmat_muut_aineistot\", \"lainaus_muut_aineistot\"],\n",
					"    13: [\"kokoelmat_videot\", \"lainaus_videot\"],\n",
					"    14: [\"kokoelmat_cd_rom_levyt\", \"lainaus_cd_rom_levyt\"],\n",
					"    15: [\"lainaus_celian_aanikirjat_cd_levyina\"],\n",
					"    16: [\"kokoelmat_dvd_ja_blu_ray_levyt\", \"lainaus_dvd_ja_blu_ray_levyt\"]\n",
					"}\n",
					"\n",
					"#Creating expressions for stack()\n",
					"pivot_expression_collections = \"\"\n",
					"pivot_n_collections = 0\n",
					"pivot_expression_loans = \"\"\n",
					"pivot_n_loans = 0\n",
					"for key, value in mapping.items():\n",
					"    for v in value:\n",
					"        if str(v).startswith(\"kokoelmat\"):\n",
					"            pivot_expression_collections += f\"'{v}', {v}, \"\n",
					"            pivot_n_collections += 1\n",
					"        elif str(v).startswith(\"lainaus\"):\n",
					"            pivot_expression_loans += f\"'{v}', {v}, \"\n",
					"            pivot_n_loans += 1\n",
					"\n",
					"pivot_expression_collections = pivot_expression_collections[0:len(pivot_expression_collections) - 2]\n",
					"pivot_expression_loans = pivot_expression_loans[0:len(pivot_expression_loans) - 2]\n",
					"\n",
					"#Creating unpivoted data frames\n",
					"df_pivoted_collection = df.selectExpr(\"Kunta\", \"Vuosi\", f\"stack({pivot_n_collections}, {pivot_expression_collections}) as (kategoria_id, maara)\")\n",
					"df_pivoted_loans = df.selectExpr(\"Kunta\", \"Vuosi\", f\"stack({pivot_n_loans}, {pivot_expression_loans}) as (kategoria_id, maara)\")\n",
					"\n",
					"#Remove unnecessary references\n",
					"del df\n",
					"del pivot_expression_collections\n",
					"del pivot_expression_loans\n",
					"del pivot_n_collections\n",
					"del pivot_n_loans\n",
					"\n",
					"#Rename columns in both data frames\n",
					"df_pivoted_collection = df_pivoted_collection.withColumnRenamed(\"maara\", \"kokoelma_maara\")\n",
					"df_pivoted_loans = df_pivoted_loans.withColumnRenamed(\"maara\", \"lainaus_maara\")\n",
					"\n",
					"#Create reverse mapping from the original mapping\n",
					"reverse_mapping = {val: key for key, values in mapping.items() for val in values}\n",
					"\n",
					"#Remove unnecessary references\n",
					"del mapping\n",
					"mapping_expression = F.create_map([F.lit(x) for pair in reverse_mapping.items() for x in pair])\n",
					"\n",
					"#Remove unnecessary references\n",
					"del reverse_mapping\n",
					"\n",
					"#Create new column kategoria with correct category ids\n",
					"df_pivoted_collection = df_pivoted_collection.withColumn(\"kategoria\", mapping_expression.getItem(F.col(\"kategoria_id\")))\n",
					"df_pivoted_loans = df_pivoted_loans.withColumn(\"kategoria\", mapping_expression.getItem(F.col(\"kategoria_id\")))\n",
					"\n",
					"#Merging and selecting final data frames and columns\n",
					"df_merged = df_pivoted_collection.join(df_pivoted_loans, on=[\"kunta\", \"vuosi\", \"kategoria\"], how=\"inner\")\n",
					"df_merged = df_merged.select(\"Kunta\", \"Vuosi\", \"kategoria\", \"kokoelma_maara\", \"lainaus_maara\")\n",
					"\n",
					"#Remove unnecessary references\n",
					"del df_pivoted_collection\n",
					"del df_pivoted_loans\n",
					"\n",
					"#Save to dedicated pool\n",
					"df_merged.write.mode(\"overwrite\").synapsesql(\"group2sqlpool.library.fact_library\")"
				],
				"execution_count": 27
			}
		]
	}
}