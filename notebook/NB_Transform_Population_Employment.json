{
	"name": "NB_Transform_Population_Employment",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a8cc91f4-041b-4be4-a158-73b7803daf4e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df1 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_14.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df1.columns:\n",
					"    matchy = re.match(matching_regex, column)\n",
					"    if matchy:\n",
					"        #print(f\"Rename column '{column}' to column '{matchy.groups()[0]}'\")\n",
					"        df1 = df1.withColumnRenamed(column, matchy.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df1 = df1.drop(column)\n",
					"\n",
					"#display(df1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"from pyspark.sql.functions import lit\n",
					"\n",
					"# Rename \"alue\" to \"kunta\"\n",
					"df1 = df1.withColumnRenamed(\"alue\", \"kunta\")\n",
					"df1 = df1.withColumnRenamed(\"2014\", \"yhteensa\")\n",
					"\n",
					"df1 = df1.withColumn(\"year\", lit(2014))\n",
					"df1=df1.pandas()\n",
					"#display(df1)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df2 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_15.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df2 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df2.columns:\n",
					"    matchi = re.match(matching_regex_df2, column)\n",
					"    if matchi:\n",
					"        #print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df2 = df2.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df2 = df2.drop(column)\n",
					"\n",
					"#display(df2)"
				],
				"execution_count": 156
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd2 = df2.toPandas()\n",
					"df_melted2 = pd.melt(df_pd2, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='year', value_name='yhteensa')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"df_melted_spark2 = spark.createDataFrame(df_melted2)\n",
					"#display(df_melted_spark2)"
				],
				"execution_count": 157
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df3 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_18.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"\n",
					"#display(df3)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df3 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_18.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df3 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df3.columns:\n",
					"    matchi = re.match(matching_regex_df3, column)\n",
					"    if matchi:\n",
					"        print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df3 = df3.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df3 = df3.drop(column)\n",
					"\n",
					"#display(df3)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd3 = df3.toPandas()\n",
					"df_melted3 = pd.melt(df_pd3, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='year', value_name='yhteensa')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"df_melted_spark3 = spark.createDataFrame(df_melted3)\n",
					"display(df_melted_spark3)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df4 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_21.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"\n",
					"#display(df4)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df4 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_21.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df4 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df4.columns:\n",
					"    matchi = re.match(matching_regex_df4, column)\n",
					"    if matchi:\n",
					"        print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df4 = df4.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df4 = df4.drop(column)\n",
					"\n",
					"#display(df4)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd4 = df4.toPandas()\n",
					"df_melted4 = pd.melt(df_pd4, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='year', value_name='yhteensa')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"df_melted_spark4 = spark.createDataFrame(df_melted4)\n",
					"display(df_melted_spark4)"
				],
				"execution_count": null
			}
		]
	}
}