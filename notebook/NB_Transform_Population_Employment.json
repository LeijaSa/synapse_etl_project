{
	"name": "NB_Transform_Population_Employment",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bddd3d23-8480-40e6-a06a-209f259d4878"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df1 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_14.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df1.columns:\n",
					"    matchy = re.match(matching_regex, column)\n",
					"    if matchy:\n",
					"        #print(f\"Rename column '{column}' to column '{matchy.groups()[0]}'\")\n",
					"        df1 = df1.withColumnRenamed(column, matchy.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df1 = df1.drop(column)\n",
					"\n",
					"#display(df1)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"from pyspark.sql.functions import lit\n",
					"\n",
					"df1 = df1.withColumnRenamed(\"2014\", \"luku\")\n",
					"\n",
					"df1 = df1.withColumn(\"vuosi\", lit(2014))\n",
					"df1=df1.toPandas()\n",
					"#display(df1)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df2 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_15.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df2 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df2.columns:\n",
					"    matchi = re.match(matching_regex_df2, column)\n",
					"    if matchi:\n",
					"        #print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df2 = df2.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df2 = df2.drop(column)\n",
					"\n",
					"#display(df2)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd2 = df2.toPandas()\n",
					"df_melted2 = pd.melt(df_pd2, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='vuosi', value_name='luku')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"#df_melted_spark2 = spark.createDataFrame(df_melted2)\n",
					"#display(df_melted_spark2)"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df3 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_18.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"\n",
					"#display(df3)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df3 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_18.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df3 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df3.columns:\n",
					"    matchi = re.match(matching_regex_df3, column)\n",
					"    if matchi:\n",
					"        print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df3 = df3.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df3 = df3.drop(column)\n",
					"\n",
					"#display(df3)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd3 = df3.toPandas()\n",
					"df_melted3 = pd.melt(df_pd3, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='vuosi', value_name='luku')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"#df_melted_spark3 = spark.createDataFrame(df_melted3)\n",
					"#display(df_melted_spark3)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df4 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_21.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"\n",
					"#display(df4)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"\n",
					"df4 = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/raw/population_employment_21.csv\", header=True, inferSchema=True, encoding=\"Latin1\")\n",
					"matching_regex_df4 = r\"Yhteensä Yhteensä (\\d.*) Väestö 31.12.\"\n",
					"\n",
					"for column in df4.columns:\n",
					"    matchi = re.match(matching_regex_df4, column)\n",
					"    if matchi:\n",
					"        print(f\"Rename column '{column}' to column '{matchi.groups()[0]}'\")\n",
					"        df4 = df4.withColumnRenamed(column, matchi.groups()[0])\n",
					"    elif column.lower() not in [\"alue\", \"pääasiallinen toiminta\"]:\n",
					"        df4 = df4.drop(column)\n",
					"\n",
					"#display(df4)"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"df_pd4 = df4.toPandas()\n",
					"df_melted4 = pd.melt(df_pd4, id_vars=['Alue', 'Pääasiallinen toiminta'], var_name='vuosi', value_name='luku')\n",
					"# Convert Pandas DataFrame back to PySpark DataFrame\n",
					"#df_melted_spark4 = spark.createDataFrame(df_melted4)\n",
					"#display(df_melted_spark4)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import pandas as pd\n",
					"from pyspark.sql.functions import col\n",
					"\n",
					"combined_df = pd.concat([df1, df_melted2, df_melted3, df_melted4], ignore_index=True) \n",
					"# Get the distinct values of the 'year' column\n",
					"distinct_years = combined_df['vuosi'].unique()\n",
					"\n",
					"#Convert the Pandas DataFrame to a Spark DataFrame\n",
					"spark_df = spark.createDataFrame(combined_df)\n",
					"\n",
					"spark_df.printSchema()\n",
					"\n",
					"# Convert 'yhteensa' to int (from long)\n",
					"spark_df = spark_df.withColumn('luku', col('luku').cast('int'))\n",
					"\n",
					"# Convert 'vuosi' to int (from string)\n",
					"spark_df = spark_df.withColumn('vuosi', col('vuosi').cast('int'))\n",
					"\n",
					"# Check the schema after the changes\n",
					"spark_df.printSchema()\n",
					"\n",
					"# Get distinct values from the 'vuosi' column\n",
					"distinct_vuosi = spark_df.select('vuosi').distinct().collect()\n",
					"\n",
					"# Convert the result into a list of values\n",
					"distinct_vuosi_values = [row['vuosi'] for row in distinct_vuosi]\n",
					"\n",
					"# Display the distinct values\n",
					"print(distinct_vuosi_values)\n",
					"\n",
					"spark_df = spark_df.withColumnRenamed(\"Alue\", \"kunta\")\n",
					"spark_df = spark_df.withColumnRenamed(\"Pääasiallinen toiminta\", \"joukko\")\n",
					"\n",
					"display(spark_df)"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"spark_df = spark_df.filter(spark_df.kunta != \"KOKO MAA\")\n",
					"display(spark_df)"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"df_pivoted = spark_df.groupBy(\"kunta\", \"vuosi\").pivot(\"joukko\").agg(F.first(\"luku\"))\n",
					"\n",
					"# Order the DataFrame alphabetically by 'kunta'\n",
					"df_pivoted_ordered = df_pivoted.orderBy(\"kunta\", \"vuosi\")\n",
					"\n",
					"# Display the result\n",
					"display(df_pivoted_ordered)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Eläkeläiset\", \"elakelaiset\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Muut työvoiman ulkopuolella olevat\", \"muut_tyovoiman_ulkopuolella_olevat\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Opiskelijat, koululaiset\", \"opiskelijat\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Työlliset\", \"tyolliset\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Työttömät\", \"tyottomat\")\n",
					"\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Työvoima\", \"tyovoima\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Työvoiman ulkopuolella olevat\", \"tyovoiman_ulkopuolella_olevat\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Varusmiehet, siviilipalvelusmiehet\", \"varsiviilimiehet\")\n",
					"df_pivoted_ordered = df_pivoted_ordered.withColumnRenamed(\"Yhteensä\", \"vakiluku\")\n",
					"\n",
					"display(df_pivoted_ordered)\n",
					""
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"source": [
					"for column in df_pivoted_ordered.columns:\n",
					"    print(column)"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# List of column names\n",
					"columns = [\n",
					"    \"kunta\",\n",
					"    \"vuosi\",\n",
					"    \"0-14 -vuotiaat\", \n",
					"    \"elakelaiset\", \n",
					"    \"muut_tyovoiman_ulkopuolella_olevat\", \n",
					"    \"opiskelijat\", \n",
					"    \"tyolliset\", \n",
					"    \"tyottomat\", \n",
					"    \"tyovoima\", \n",
					"    \"tyovoiman_ulkopuolella_olevat\", \n",
					"    \"varsiviilimiehet\", \n",
					"    \"vakiluku\"\n",
					"]\n",
					"\n",
					"# Loop through each column and count the number of null values\n",
					"null_counts = {}\n",
					"for column in columns:\n",
					"    null_count = df_pivoted_ordered.filter(F.col(column).isNull()).count()\n",
					"    null_counts[column] = null_count\n",
					"\n",
					"# Display the results\n",
					"for column, count in null_counts.items():\n",
					"    print(f\"Number of null values in '{column}': {count}\")"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"source": [
					"# Define output path\n",
					"output_path = \"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/population/population_data.parquet\"\n",
					"\n",
					"# Save DataFrame as Parquet\n",
					"df_pivoted_ordered.write.mode(\"overwrite\").parquet(output_path)\n",
					"\n",
					"print(\"Data successfully saved to ADLS in Parquet format.\")"
				],
				"execution_count": 73
			}
		]
	}
}