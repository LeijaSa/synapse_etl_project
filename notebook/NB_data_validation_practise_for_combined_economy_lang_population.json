{
	"name": "NB_data_validation_practise_for_combined_economy_lang_population",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "group2sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "25c71572-ed6b-40f1-a763-12c64ebc9f16"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Group2SynapseETLProject/providers/Microsoft.Synapse/workspaces/group2-synapse-etl-workspace/bigDataPools/group2sparkpool",
				"name": "group2sparkpool",
				"type": "Spark",
				"endpoint": "https://group2-synapse-etl-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/group2sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"\n",
					"df_economy = spark.read.csv(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/economy/\", header=True, inferSchema=True)\n",
					"df_lang = spark.read.parquet(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/finswe/finswe_data.parquet/\")\n",
					"df_population = spark.read.parquet(\"abfss://vaesto@group2projectstorage.dfs.core.windows.net/silver/population/population_data.parquet\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"#df_combined = df_economy.join(df_lang, on=[\"kunta\", \"vuosi\"], how=\"left\")\n",
					"from pyspark.sql import functions as F\n",
					"\n",
					"# Perform a cross join between the two DataFrames\n",
					"df_economy.alias(\"a\").crossJoin(df_lang.alias(\"b\")) \\\n",
					"    .filter(\n",
					"        (F.col(\"a.kunta\") != F.col(\"b.kunta\")) & \n",
					"        (F.levenshtein(F.col(\"a.kunta\"), F.col(\"b.kunta\")) <= 2)\n",
					"    ) \\\n",
					"    .select(F.col(\"a.kunta\"), F.col(\"b.kunta\")) \\\n",
					"    .show()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"# Set a threshold for similarity (Levenshtein distance)\n",
					"threshold = 1\n",
					"\n",
					"# Perform a cross join and filter based on the Levenshtein distance\n",
					"df_economy.alias(\"a\").crossJoin(df_lang.alias(\"b\")) \\\n",
					"    .filter(\n",
					"        (F.col(\"a.kunta\") != F.col(\"b.kunta\")) &  # Ensure they're not exactly the same\n",
					"        (F.levenshtein(F.col(\"a.kunta\"), F.col(\"b.kunta\")) <= threshold)  # Similar based on Levenshtein distance\n",
					"    ) \\\n",
					"    .select(F.col(\"a.kunta\").alias(\"kunta_a\"), F.col(\"b.kunta\").alias(\"kunta_b\")) \\\n",
					"    .show(400)\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df_combined = df_economy.join(df_lang, on=[\"kunta\", \"vuosi\"], how=\"left\")\n",
					"df_all_combined=df_combined.join(df_population, on=[\"kunta\", \"vuosi\"], how=\"left\")\n",
					"display(df_all_combined)\n",
					"#for column in df_all_combined.columns:\n",
					"    #print(column)\n",
					"\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, sum\n",
					"\n",
					"# Count the number of null values for each column\n",
					"null_counts = df_all_combined.select([sum(col(c).isNull().cast(\"int\")).alias(c) for c in df_all_combined.columns])\n",
					"\n",
					"# Show the result\n",
					"null_counts.show()\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, lit\n",
					"\n",
					"# Count the number of null values for each column\n",
					"null_counts = df_all_combined.select(\n",
					"    [sum(col(c).isNull().cast(\"int\")).alias(c) for c in df_all_combined.columns]\n",
					")\n",
					"\n",
					"# Transpose the results to have one row with column names and their corresponding null counts\n",
					"null_counts_transposed = null_counts.selectExpr(\n",
					"    \"stack({0}, {1}) as (column_name, null_count)\".format(\n",
					"        len(df_all_combined.columns),\n",
					"        \",\".join([f\"'{c}', {c}\" for c in df_all_combined.columns])\n",
					"    )\n",
					")\n",
					"\n",
					"# Show the results\n",
					"null_counts_transposed.show()"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}